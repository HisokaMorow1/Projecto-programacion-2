#include <allegro.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <string.h>
#define MAXANCHO 640
#define MAXLARGO 480
#define largo 10
#define MAXMANCHO 32
#define MAXALTO 24
#define N 10
#define largoo 10

// estructuras

/*
struct bloke
{
	int p1, p2;
	bool destruido;
};
*/

struct rank
{
	char nick[largoo];
	int puntos;
};

struct jugador
{
    char nombre[largo];
    int puntaje;
};
void limpiar();
void moveBall();
void p1Move();
void p2Move();
void startNew();
void checkWin(struct jugador jugadores[2]);
void setupGame();
void mapa();
void mapa2();
void mapa3();
void dibujamapa();
void bloqueduro();
void leeranking(struct rank ranking[N]);
void muestrarank(rank ranking[N]);
void grabaranking(struct rank ranking[N]);
void mapa_general(int level);

char mapita[MAXANCHO][MAXLARGO];
BITMAP *bmp;
BITMAP *buffer;
BITMAP *bloque;
BITMAP *bloque2;
BITMAP *mouse1;
BITMAP *fondo;
BITMAP *fondo2;
BITMAP *fondo3;
BITMAP *fondo4;
BITMAP *vacio;
BITMAP *bloque3;
BITMAP *bloque4;
BITMAP *dificultad_menu;
BITMAP *dificultad_facil;
BITMAP *dificultad_media;
BITMAP *dificultad_dificil;



// variables globales

int x=200;
int y=100;

int tempX=100;
int tempY=100;

int p1_x = 20;
int p1_y = 210;

int p1_tempX = 20;
int p1_tempY = 210;

int p2_x = 609;
int p2_y = 210;

int p2_tempX = 609;
int p2_tempY = 210;
	
int dir=1;  

int main()
{	
	struct rank ranking[N];
	struct jugador jugadores[2];
    allegro_init();
    install_keyboard();
    install_mouse();
    set_color_depth(32);
    set_gfx_mode( GFX_AUTODETECT_WINDOWED, 640, 480, 0, 0);
    buffer = create_bitmap(640,480);
    
    mouse1 = load_bitmap("cursor.bmp",NULL);
    fondo = load_bitmap("inicio.bmp",NULL);
    fondo2 = load_bitmap("comenzar.bmp",NULL);
    fondo3= load_bitmap("score.bmp",NULL);
    fondo4 = load_bitmap("salir.bmp",NULL);
    dificultad_facil = load_bitmap("dificultad_facil.bmp",NULL);
    dificultad_media= load_bitmap("dificultad_media.bmp",NULL);
    dificultad_dificil = load_bitmap("dificultad_dificil.bmp",NULL);
    dificultad_menu = load_bitmap("dificultad_menu.bmp",NULL);

    bool salida = false;
    bool salida2= false;
    while(!salida)
    {
    	if (mouse_x > 270 && mouse_x < 344 && mouse_y > 275 && mouse_y < 363) //comenzar
    	{
    		blit(fondo2,buffer,0,0,0,0,640,480);
    		if (mouse_b & 1)
    		{
   				masked_blit(mouse1,buffer,0,0,mouse_x,mouse_y,270,397); 						
				blit(dificultad_menu,buffer,0,0,0,0,640,480); 
				blit(buffer,screen,0,0,0,0,640,480);  
    			while(!salida2)
    			{	
    				if(mouse_x > 200 && mouse_x < 260 && mouse_y > 160 && mouse_y < 180) //mapa 1
    					{
    						blit(dificultad_facil,buffer,0,0,0,0,640,480);
    						masked_blit(mouse1,buffer,0,0,mouse_x,mouse_y,270,397);	
    						blit(buffer,screen,0,0,0,0,640,480);  
    						if (mouse_b & 1)
    							{
 									clear(buffer);
    			  					position_mouse(641,481);
    		    					mapa_general(1);	  	
    								salida = true;
    								salida2 = true;
    							}
						}
					if(mouse_x > 200 && mouse_x < 280 && mouse_y > 225 && mouse_y < 240) //mapa 2
    					{
    						blit(dificultad_media,buffer,0,0,0,0,640,480);
    						masked_blit(mouse1,buffer,0,0,mouse_x,mouse_y,270,397);
    						blit(buffer,screen,0,0,0,0,640,480);  	
    						if (mouse_b & 1)
    							{
    								clear(buffer);
    			  					position_mouse(641,481);
    			      				mapa_general(2);		
    								salida = true;
    								salida2 = true;
  			  					}
						}
					if(mouse_x > 204 && mouse_x < 285 && mouse_y > 285 && mouse_y < 305 ) //mapa 3
    					{
    						blit(dificultad_dificil,buffer,0,0,0,0,640,480);
    						masked_blit(mouse1,buffer,0,0,mouse_x,mouse_y,270,397);
    						blit(buffer,screen,0,0,0,0,640,480);  	
    						if (mouse_b & 1)
    							{
    								clear(buffer);
    			  					position_mouse(641,481);
									mapa_general(3);					    								
    								salida = true;
    								salida2 = true;
    							}
						}
					
				}	
   			}
   			
		}
		
		else if (mouse_x > 244 && mouse_x < 290 && mouse_y > 285 && mouse_y < 399) //score
		{
			blit(fondo3,buffer,0,0,0,0,640,480);
    		if (mouse_b & 1)
    		{
    			salida = true;
    		/*	muestrarank(rank ranking[N]);
    			ranking[N].nick;
    			ranking[N].puntos;
    			return 0;*/
    			
			}
		}
		else if (mouse_x > 242 && mouse_x < 283 && mouse_y > 425 && mouse_y < 440)
		{
			blit(fondo4,buffer,0,0,0,0,640,480);
    		if (mouse_b & 1)
    		{
    			salida = true;
    			limpiar();
    			return 0;
			}
		}
		else blit(fondo,buffer,0,0,0,0,640,480);
		scare_mouse();
		masked_blit(mouse1,buffer,0,0,mouse_x,mouse_y,270,397);
		blit(buffer,screen,0,0,0,0,640,480);
	}
    /*setupGame();*/
    bloque = load_bitmap("bloque3.bmp",NULL);
	bloque2 = load_bitmap("bloque2.bmp",NULL);
	vacio = load_bitmap("f.bmp",NULL);
	bloque3 = load_bitmap("color amarillo.bmp",NULL);
	bloque4 = load_bitmap("colorverde.bmp",NULL);
    dibujamapa();
    strcpy(jugadores[0].nombre,"Gano el Jugador 1");
    strcpy(jugadores[1].nombre,"Gano el Jugador 2");
    
    while( !key[KEY_ESC])
	{
		p1Move();
        p2Move();
        checkWin(jugadores);
        moveBall();
        bloqueduro();
    }    
    
    limpiar();
    return 0;
}
END_OF_MAIN();
 
void moveBall() //movimiento de la pelota
{
	tempX=x;
	tempY=y;
	
	if (dir == 1 && x!=30 && y!=30)
	{
		--x;
		--y;
	}
	else if (dir == 2 && x !=30 && y !=450)
	{
		--x;
		++y;
	}
	else if(dir == 3 && x !=610 && y !=30)
	{
		++x;
		--y;
	}
	else if(dir == 4 && x !=610 && y != 450)
	{
		++x;
		++y;
	}
	else 
	{
		dir = rand()%4+1;
	}
	
	acquire_screen();
	circlefill ( buffer, tempX, tempY, 5, makecol( 0, 0, 0));
	draw_sprite(screen,buffer,0,0);
	circlefill(screen,tempX,tempY,5,makecol(128,225,0));
	dibujamapa();
	release_screen();
	rest(10);

}    

void p1Move() //jugador 1
{
    p1_tempY=p1_y;
    
    if( key[KEY_W] && p1_y > 20){
     
        --p1_y;
              
    } else if( key[KEY_S] && p1_y < 400){
     
        ++p1_y;
              
    }     
    
    acquire_screen();
    rectfill( buffer, p1_tempX, p1_tempY, p1_tempX + 10, p1_tempY + 60, makecol ( 0, 0, 0));
    rectfill( buffer, p1_x, p1_y, p1_x + 10, p1_y + 60, makecol ( 0, 0, 255));
    dibujamapa();
    release_screen();
          
}  

void p2Move() //jugador 2
{
	
    p2_tempY = p2_y;
 
    if( key[KEY_UP] && p2_y > 20){
     
        --p2_y;
              
    } else if( key[KEY_DOWN] && p2_y < 400){
     
        ++p2_y;
              
    }     
    
    acquire_screen();
    rectfill( buffer, p2_tempX, p2_tempY, p2_tempX + 10, p2_tempY + 60, makecol ( 0, 0, 0));
    rectfill( buffer, p2_x, p2_y, p2_x + 10, p2_y + 60, makecol ( 0, 0, 255));
    dibujamapa();
    release_screen();
          
}    

void startNew() //juego nuevo
{
    clear_keybuf();
    readkey();
    clear_to_color( buffer, makecol( 0, 0, 0));
    x = 320;
    y = 240;
    
    p1_x=20;
    p1_y=210;
    
    p2_x=609;
    p2_y=210;

    dibujamapa();
}    

void checkWin(struct jugador jugadores[2]) //ver quien gano
{

    if ( x < 0){
        textout_ex( screen, font, jugadores[1].nombre, 300, 240, makecol( 255, 0, 0), makecol( 0, 0, 0)); 
        startNew();
    } else if ( x > 640){
        textout_ex( screen, font, jugadores[0].nombre, 300, 240, makecol( 255, 0, 0), makecol( 0, 0, 0)); 
        startNew();
    }    
   
}    

void setupGame() //modo de juego
{
    acquire_screen();
    rectfill( buffer, p1_x, p1_y, p1_x + 10, p1_y + 60, makecol ( 0, 0, 255));
    rectfill( buffer, p2_x, p2_y, p2_x + 10, p2_y + 60, makecol ( 0, 0, 255)); 
    circlefill( buffer, x, y, 5, makecol( 128, 225, 0));
    draw_sprite( screen, buffer, 0, 0);
    release_screen();
    
   /* time(&secs);
   /* srand( (unsigned int)secs);*/
    dir = rand() % 4 + 1;
            
}   

void mapa_general(int level)
{
	FILE *mapFile;
	int i, j;
	char aux;
	switch(level)
	{
		case 1:
			if((mapFile = fopen("mapa.txt", "r")) == NULL)
			{
				printf("Error al abrir archivo");
				break;
			}
			break;
		case 2:
			if((mapFile = fopen("mapa2.txt", "r")) == NULL)
				{
					printf("Error al abrir archivo");
					break;
				}
				break;
		case 3:
			if((mapFile = fopen("mapa3.txt", "r")) == NULL)
			{
				printf("Error al abrir archivo");
				break;
			}
			break;
	}
	
	for (i = 0; i < MAXALTO; i++)
	{
		for (j = 0; j < MAXMANCHO; j++)
  		{
		  	fscanf(mapFile, "%c", &mapita[i][j]);
		}
		fscanf(mapFile, "%c", &aux);
	}
	fclose(mapFile);
}

void dibujamapa() //dibuja los bloques
{
	int i,j;
	for(i = 0; i < MAXALTO; i++)
	{
		for(j = 0; j < MAXMANCHO; j++)
		{
			if (mapita[i][j]=='x')
			{	
				draw_sprite(buffer,bloque,20*j,20*i);
			}
			if(mapita[i][j]=='a')
			{
				draw_sprite(buffer,bloque2,20*j,20*i);
			}
			if(mapita[i][j]=='f')
			{
				draw_sprite(buffer,vacio,20*j,20*i);
			}
			if(mapita[i][j]=='c')
			{
				draw_sprite(buffer,bloque3,20*j,20*i);
			}
			if(mapita[i][j]=='s')
			{
				draw_sprite(buffer,bloque4,20*j,20*i);
			}
		}	
			
	}
		
}

void bloqueduro() //aqui se elimina los bloques
{
	int posy=tempY/20;
	int posx=tempX/20;
 	if(mapita[posy][posx]=='a')
 	{
 		mapita[posy][posx]='f';
 		dir = 2; 
 		--x;
 		++y;
	}
	if(mapita[posy][posx]=='c')
 	{
 		mapita[posy][posx]='f';
 		dir = 1;
 		--x;
 		--y;
	}
	if(mapita[posy][posx]=='s')
 	{
 		mapita[posy][posx]='f';
 		dir =3;
 		++x;
 		--y;
	}

 }
 
void leeranking(struct rank ranking[N])
{
	FILE *ranki;
	int *Nreal;
	*Nreal=0;
	if((ranki = fopen("rank.txt","r"))==NULL)
	{
		printf("Error al abrir el archivo");
		return;
	}
	while(!feof(ranki))
	{
		fscanf(ranki,"%s",&ranking[*Nreal].nick);
		fscanf(ranki,"%d",&ranking[*Nreal].puntos);
		(*Nreal)++;
	}
	fclose(ranki);
} 

void muestrarank(rank ranking[N])
{
	int Nreal,i;
	for(i=0;i<Nreal;i++)
	{
		char puntaje[20];
		itoa(ranking[i].puntos,puntaje,10);
		textout_ex( screen, font, ranking[i].nick, 350, 290, makecol( 255, 0, 0), makecol( 0, 0, 0));
		textout_ex( screen, font, puntaje, 300, 250, makecol( 255, 0, 0), makecol( 0, 0, 0));  
		/*printf("%s %d\t",ranking[i].nick,ranking[i].puntos);*/
		printf("\n");
	}
}

void grabaranking(struct rank ranking[N])
{
	int Nreal,i;
	FILE *ranki;
	if((ranki = fopen("rank.txt","w"))==NULL)
	{
		printf("Error al abrir el archivo");
		return;
	}
	for(i=0;i<Nreal;i++)
	{
		if(i<Nreal-1)
		{
			fprintf(ranki,"%s %d\n",ranking[i].nick,ranking[i].puntos);
		}
		else 
		{
			fprintf(ranki,"%s %d",ranking[i].nick,ranking[i].puntos);
		}
	}
	fclose(ranki);
}


void limpiar()
{
	destroy_bitmap(buffer);
	destroy_bitmap(mouse1);
	destroy_bitmap(fondo);
	destroy_bitmap(fondo2);
	destroy_bitmap(fondo3);
	destroy_bitmap(fondo4);
	destroy_bitmap(dificultad_menu);
	destroy_bitmap(dificultad_facil);
	destroy_bitmap(dificultad_media);
	destroy_bitmap(dificultad_dificil);
}